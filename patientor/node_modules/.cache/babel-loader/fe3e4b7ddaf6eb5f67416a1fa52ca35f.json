{"ast":null,"code":"var _jsxFileName = \"/Users/abigailnottingham/HTML Projects/fullstack_open/part9_c_patientor_frontend/patientor/src/PatientViewPage/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Container, Button } from \"semantic-ui-react\";\nimport EntryDetails from \"../EntryDetails\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue } from \"../state\";\nimport { setSinglePatient } from \"../state\";\nimport AddEntryModal from \"../AddEntryModal\";\nimport { createPatientEntry } from \"../state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PatientViewPage = () => {\n  _s();\n\n  var _patients$id, _patients$id2, _patients$id3, _patients$id4, _patients$id4$entries;\n\n  const [{\n    patients\n  }, dispatch] = useStateValue();\n  const {\n    id\n  } = useParams();\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [error, setError] = React.useState();\n\n  const openModal = () => setModalOpen(true);\n\n  const closeModal = () => {\n    setModalOpen(false);\n    setError(undefined);\n  }; // check how the other ones options pop out\n  // change the form field file to use all the types from diagnosis - start with one entry type\n  // link all of the pieces together and get the updated modal form to render in frontend\n  // add the right api call to submit and check response is ok\n  // update patient with the new entry when submitted.\n  // add multiple entry types (dependant on type selected in dropdown it should change)\n  // test they all submit correctly\n\n\n  const submitNewEntry = async values => {\n    try {\n      // change this to correct endpoint and data\n      const {\n        data: newPatient\n      } = await axios.post(`${apiBaseUrl}/patients`, values);\n      dispatch(createPatientEntry(newPatient));\n      closeModal(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e) {\n      var _e$response, _e$response2, _e$response2$data;\n\n      console.error(((_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.data) || 'Unknown Error');\n      setError(((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.error) || 'Unknown error');\n    }\n  };\n\n  React.useEffect(() => {\n    if (patients[id] && patients[id].ssn) return;\n\n    const fetchPatientList = async () => {\n      try {\n        const {\n          data: singlePatientData\n        } = await axios.get(`${apiBaseUrl}/patients/${id}`);\n        dispatch(setSinglePatient(singlePatientData));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    void fetchPatientList();\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      textAlign: \"left\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Patient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      textAlign: \"left\",\n      children: [/*#__PURE__*/_jsxDEV(HealthRatingBar, {\n        showText: false,\n        rating: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      textAlign: \"left\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: (_patients$id = patients[id]) === null || _patients$id === void 0 ? void 0 : _patients$id.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      textAlign: \"left\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddEntryModal, {\n        modalOpen: modalOpen,\n        onSubmit: submitNewEntry,\n        error: error,\n        onClose: closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => openModal(),\n        children: \"Add New Entry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ssh: \", ((_patients$id2 = patients[id]) === null || _patients$id2 === void 0 ? void 0 : _patients$id2.ssn) || 'no ssn']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"occupation: \", (_patients$id3 = patients[id]) === null || _patients$id3 === void 0 ? void 0 : _patients$id3.occupation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      textAlign: \"left\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Entries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), (_patients$id4 = patients[id]) === null || _patients$id4 === void 0 ? void 0 : (_patients$id4$entries = _patients$id4.entries) === null || _patients$id4$entries === void 0 ? void 0 : _patients$id4$entries.map(entry => {\n        return /*#__PURE__*/_jsxDEV(EntryDetails, {\n          entry: entry\n        }, entry.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 18\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PatientViewPage, \"kLqZFLAOSgSfhkfxYbwGS0fIPMg=\", false, function () {\n  return [useStateValue, useParams];\n});\n\n_c = PatientViewPage;\nexport default PatientViewPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PatientViewPage\");","map":{"version":3,"names":["React","useParams","axios","Container","Button","EntryDetails","apiBaseUrl","HealthRatingBar","useStateValue","setSinglePatient","AddEntryModal","createPatientEntry","PatientViewPage","patients","dispatch","id","modalOpen","setModalOpen","useState","error","setError","openModal","closeModal","undefined","submitNewEntry","values","data","newPatient","post","e","console","response","useEffect","ssn","fetchPatientList","singlePatientData","get","name","occupation","entries","map","entry"],"sources":["/Users/abigailnottingham/HTML Projects/fullstack_open/part9_c_patientor_frontend/patientor/src/PatientViewPage/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Container, Button } from \"semantic-ui-react\";\nimport EntryDetails from \"../EntryDetails\";\n\nimport { Entry, Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue } from \"../state\";\nimport { setSinglePatient } from \"../state\";\nimport AddEntryModal from \"../AddEntryModal\";\nimport { EntryFormValues } from \"../AddEntryModal/AddEntryForm\";\nimport { createPatientEntry } from \"../state\";\n\nconst PatientViewPage = () => {\n  const [{ patients }, dispatch] = useStateValue();\n  const { id } = useParams<{ id: string }>();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  // check how the other ones options pop out\n  // change the form field file to use all the types from diagnosis - start with one entry type\n  // link all of the pieces together and get the updated modal form to render in frontend\n  // add the right api call to submit and check response is ok\n  // update patient with the new entry when submitted.\n  // add multiple entry types (dependant on type selected in dropdown it should change)\n  // test they all submit correctly\n\n  const submitNewEntry = async (values: EntryFormValues) => {\n    try {\n      // change this to correct endpoint and data\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(createPatientEntry(newPatient));\n      closeModal();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any) {\n      console.error(e.response?.data || 'Unknown Error');\n      setError(e.response?.data?.error || 'Unknown error');\n    }\n  };\n\n  React.useEffect(() => {\n    if (patients[id] && patients[id].ssn) return;\n    const fetchPatientList = async () => {\n      try {\n        const { data: singlePatientData } = await axios.get<Patient>(\n          `${apiBaseUrl}/patients/${id}`\n        );\n        dispatch(setSinglePatient(singlePatientData));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    void fetchPatientList();\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"left\">\n        <h1>Patient</h1>\n        <p></p>\n      </Container>\n      <Container textAlign=\"left\">\n        <HealthRatingBar showText={false} rating={1} />  \n        <br />\n      </Container>\n      <Container textAlign=\"left\">\n        <h2>{patients[id]?.name}</h2>\n      </Container>\n      <Container textAlign=\"left\">\n        <br />\n        {/* remember to remove this button later */}\n        {/* <Button onClick={() => {console.log(patients[id]);}}>Data Logged In Console</Button> */}\n\n        <AddEntryModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewEntry}\n        error={error}\n        onClose={closeModal}\n      /> \n      <Button onClick={() => openModal()}>Add New Entry</Button>\n\n        <p>ssh: {patients[id]?.ssn || 'no ssn'}</p>\n        <p>occupation: {patients[id]?.occupation}</p>\n      </Container>\n      <br />\n      <Container textAlign=\"left\">\n        <h3>Entries</h3>\n        \n        {patients[id]?.entries?.map((entry: Entry) => {\n          return <EntryDetails key={entry.id} entry={entry} />;\n        })}\n        \n      </Container>\n    </div>\n  );\n};\n\nexport default PatientViewPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}