{"ast":null,"code":"export const setPatientList = patientListFromApi => {\n  return {\n    type: \"SET_PATIENT_LIST\",\n    payload: patientListFromApi\n  };\n};\nexport const setDiagnoses = diagnosesFromApi => {\n  return {\n    type: \"SET_DIAGNOSES\",\n    payload: diagnosesFromApi\n  };\n};\nexport const createPatient = singlePatientData => {\n  return {\n    type: \"SET_SINGLE_PATIENT\",\n    payload: singlePatientData\n  };\n};\nexport const createPatientEntry = (entryData, singlePatientData) => {\n  return {\n    type: \"SET_PATIENT_ENTRY\",\n    payload: singlePatientData,\n    newEntry: entryData\n  };\n};\nexport const setSinglePatient = newPatient => {\n  return {\n    type: \"ADD_PATIENT\",\n    payload: newPatient\n  };\n};\nexport const reducer = (state, action) => {\n  var _state$patients$actio;\n\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return { ...state,\n        patients: { ...action.payload.reduce((memo, patient) => ({ ...memo,\n            [patient.id]: patient\n          }), {}),\n          ...state.patients\n        }\n      };\n\n    case \"SET_DIAGNOSES\":\n      return { ...state,\n        diagnoses: { ...action.payload.reduce((memo, diagnosis) => ({ ...memo,\n            [diagnosis.code]: diagnosis\n          }), {}),\n          ...state.patients\n        }\n      };\n\n    case \"SET_SINGLE_PATIENT\":\n      if (state.patients[action.payload.id] && state.patients[action.payload.id].ssn) {\n        console.log('patient already exists');\n        return state;\n      }\n\n      return { ...state,\n        patients: { ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n\n    case \"SET_PATIENT_ENTRY\":\n      const updatedEntries = [action.newEntry];\n      (_state$patients$actio = state.patients[action.payload.id].entries) === null || _state$patients$actio === void 0 ? void 0 : _state$patients$actio.forEach(entry => updatedEntries.push(entry));\n      const updatedPatient = { ...state.patients[action.payload.id],\n        entries: updatedEntries\n      }; // if (updatedEntries) {\n      //   updatedPatient.entries = updatedEntries;\n      // }\n\n      return { ...state,\n        patients: { ...state.patients,\n          [action.payload.id]: updatedPatient\n        }\n      };\n\n    case \"ADD_PATIENT\":\n      return { ...state,\n        patients: { ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["setPatientList","patientListFromApi","type","payload","setDiagnoses","diagnosesFromApi","createPatient","singlePatientData","createPatientEntry","entryData","newEntry","setSinglePatient","newPatient","reducer","state","action","patients","reduce","memo","patient","id","diagnoses","diagnosis","code","ssn","console","log","updatedEntries","entries","forEach","entry","push","updatedPatient"],"sources":["/Users/abigailnottingham/HTML Projects/fullstack_open/part9_c_patientor_frontend/patientor/src/state/reducer.ts"],"sourcesContent":["import { State } from \"./state\";\nimport { Patient, Diagnosis, Entry } from \"../types\";\n\nexport type Action =\n  | {\n      type: \"SET_PATIENT_LIST\";\n      payload: Patient[];\n    }\n  | {\n      type: \"SET_DIAGNOSES\";\n      payload: Diagnosis[];\n    }\n  | {\n      type: \"SET_SINGLE_PATIENT\";\n      payload: Patient;\n    }\n  | {\n      type: \"ADD_PATIENT\";\n      payload: Patient;\n    }\n  | {\n    type: \"SET_PATIENT_ENTRY\";\n    payload: Patient,\n    newEntry: Entry,\n    };\n\nexport const setPatientList = (patientListFromApi: Patient[]): Action => {\n  return { type: \"SET_PATIENT_LIST\", payload: patientListFromApi };\n};\n\nexport const setDiagnoses = (diagnosesFromApi: Diagnosis[]): Action => {\n  return { type: \"SET_DIAGNOSES\", payload: diagnosesFromApi };\n};\n\nexport const createPatient = (singlePatientData: Patient): Action => {\n  return { type: \"SET_SINGLE_PATIENT\", payload: singlePatientData };\n};\n\nexport const createPatientEntry = (entryData: Entry, singlePatientData: Patient): Action => {\n  return { type: \"SET_PATIENT_ENTRY\", payload: singlePatientData , newEntry: entryData};\n};\n\nexport const setSinglePatient = (newPatient: Patient): Action => {\n  return { type: \"ADD_PATIENT\", payload: newPatient };\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case \"SET_DIAGNOSES\":\n      return {\n        ...state,\n        diagnoses: {\n          ...action.payload.reduce(\n            (memo, diagnosis) => ({ ...memo, [diagnosis.code]: diagnosis }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case \"SET_SINGLE_PATIENT\":\n      if (state.patients[action.payload.id] && state.patients[action.payload.id].ssn) {\n        console.log('patient already exists');\n        return state;\n      }\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"SET_PATIENT_ENTRY\":\n      const updatedEntries: Entry[] = [ action.newEntry ];\n      state.patients[action.payload.id].entries?.forEach(entry => updatedEntries.push(entry));\n      const updatedPatient: Patient = { ...state.patients[action.payload.id], entries: updatedEntries };\n      // if (updatedEntries) {\n      //   updatedPatient.entries = updatedEntries;\n      // }\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: updatedPatient\n        }\n      };\n    case \"ADD_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}